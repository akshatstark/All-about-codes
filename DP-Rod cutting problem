//Recursion-
public class Solution {
	static int solve(int arr[],int n,int wt){
		if(n==0){
			return wt*arr[0];
		}

		int not_cut=solve(arr,n-1,wt);
		int cut=Integer.MIN_VALUE;
		if(n+1<=wt) cut=arr[n]+solve(arr,n,wt-n-1);
		
		return Math.max(cut,not_cut);
	}
	public static int cutRod(int price[], int n) {
		return solve(price,n-1,n);
	}
}

//Memoization-
public class Solution {
	static int solve(int arr[],int n,int wt,int[][] dp){
		if(n==0){
			return wt*arr[0];
		}

		if(dp[n][wt]!=-1) return dp[n][wt];

		int not_cut=solve(arr,n-1,wt,dp);
		int cut=Integer.MIN_VALUE;
		if(n+1<=wt) cut=arr[n]+solve(arr,n,wt-n-1,dp);

		return dp[n][wt]=Math.max(cut,not_cut);
	}
	public static int cutRod(int price[], int n) {
		int[][] dp=new int[n][n+1];
		for(int[] row:dp) Arrays.fill(row,-1);

		return solve(price,n-1,n,dp);
	}
}

//Tabulation-
public class Solution {
	public static int cutRod(int price[], int n) {
		int[][] dp=new int[n][n+1];

		for(int i=0;i<=n;i++){
			dp[0][i]=i*price[0];
		} 

		for(int i=1;i<n;i++){
			for(int j=0;j<=n;j++){
				int not_cut=dp[i-1][j];
		        int cut=Integer.MIN_VALUE;
		        if(i+1<=j) cut=price[i]+dp[i][j-i-1];

				dp[i][j]=Math.max(cut,not_cut);
			}
		}

		return dp[n-1][n];
	}
}
