//Recursion-
public class Solution {
	static boolean solve(int i,int j,String pat,String txt){
		if(i<0 && j<0) return true;
		if(i<0 && j>=0) return false;
		if(j<0 && i>=0){
			for(int ii=0;ii<=i;ii++){
				if(pat.charAt(ii)!='*') return false;
			}
			return true;
		}

		if(pat.charAt(i)==txt.charAt(j) || pat.charAt(i)=='?') return solve(i-1, j-1, pat, txt);

		if(pat.charAt(i)=='*') return (solve(i-1, j, pat, txt) || solve(i, j-1, pat, txt));

		else return false;
	}
	public static boolean wildcardMatching(String pattern, String text) {
		int n=pattern.length();
		int m=text.length();

		return solve(n-1,m-1,pattern,text);
	}
}

//Memoization-

public class Solution {
    static boolean solve(int i, int j, String pat, String txt, Boolean[][] dp) {
        if (i < 0 && j < 0) return true;
        if (i < 0 && j >= 0) return false;
        if (j < 0 && i >= 0) {
            for (int ii = 0; ii <= i; ii++) {
                if (pat.charAt(ii) != '*') return false;
            }
            return true;
        }

        if (dp[i][j] != null) return dp[i][j];

        if (pat.charAt(i) == txt.charAt(j) || pat.charAt(i) == '?') {
            return dp[i][j] = solve(i - 1, j - 1, pat, txt, dp);
        }

        if (pat.charAt(i) == '*') {
            return dp[i][j] = (solve(i - 1, j, pat, txt, dp) || solve(i, j - 1, pat, txt, dp));
        } else {
            return dp[i][j] = false;
        }
    }

    public static boolean wildcardMatching(String pattern, String text) {
        int n = pattern.length();
        int m = text.length();

        Boolean[][] dp = new Boolean[n][m];
        
        return solve(n - 1, m - 1, pattern, text, dp);
    }
}

//Tabulation-
public class Solution {
    public static boolean wildcardMatching(String pat, String txt) {
        int n = pat.length();
        int m = txt.length();

        Boolean[][] dp = new Boolean[n+1][m+1];

		dp[0][0]=true;
		for(int j=1;j<=m;j++){
			dp[0][j]=false;
		}
		for(int i=1;i<=n;i++){
			boolean flag=true;
			for (int ii = 0; ii < i; ii++) {
                if (pat.charAt(ii) != '*') {
					flag=false; 
					break;
					}
                }
			dp[i][0]=flag;
		}

		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				
       		 if (pat.charAt(i-1) == txt.charAt(j-1) || pat.charAt(i-1) == '?') {
            	dp[i][j] = dp[i-1][j-1];
        	    }

        	else if (pat.charAt(i-1) == '*') {
            	dp[i][j] = dp[i-1][j] ||dp[i][j-1];
             	} 
			else {
            	dp[i][j] = false;
        	    }
			}
		}
        return dp[n][m];
    }
}
