//partition dp...
//Recursion-
public class Solution {
    static int solve(int i,int j,int[] arr){
        if(i>j) return 0;

        int maxi=Integer.MIN_VALUE;
        for(int k=i;k<=j;k++){
            int cost=(arr[i-1]*arr[k]*arr[j+1])+solve(i, k-1, arr)+solve(k+1, j, arr);   // basic principle lies here
            maxi=Math.max(maxi, cost);
        }
        return maxi;
    }
    public static int maxCoins(int a[]) {
        int n=a.length;
        int[] arr=new int[n+2];
        arr[0]=1;
        for(int i=0;i<n;i++){
            arr[i+1]=a[i];
        }
        arr[n+1]=1;

        return solve(1,n,arr);
    }
}

//Memoization-
public class Solution {
    static int solve(int i,int j,int[] arr,int[][] dp){
        if(i>j) return 0;

        if(dp[i][j]!=-1) return dp[i][j];

        int maxi=Integer.MIN_VALUE;
        for(int k=i;k<=j;k++){
            int cost=(arr[i-1]*arr[k]*arr[j+1])+solve(i, k-1, arr,dp)+solve(k+1, j, arr,dp);
            maxi=Math.max(maxi, cost);
        }
        return dp[i][j]=maxi;
    }
    public static int maxCoins(int a[]) {
        int n=a.length;
        int[] arr=new int[n+2];
        arr[0]=1;
        for(int i=0;i<n;i++){
            arr[i+1]=a[i];
        }
        arr[n+1]=1;

        int[][] dp=new int[n+1][n+1];
        for(int[] row:dp) Arrays.fill(row, -1);

        return solve(1,n,arr,dp);
    }
}

//Tabulation-
    public static int maxCoins(int a[]) {
        int n=a.length;
        int[] arr=new int[n+2];
        arr[0]=1;
        for(int i=0;i<n;i++){
            arr[i+1]=a[i];
        }
        arr[n+1]=1;

        int[][] dp=new int[n+2][n+2];
        for(int[] row:dp) Arrays.fill(row,0);

        for(int i=n;i>=1;i--){
            for(int j=1;j<=n;j++){
                if(i>j) continue;
                 int maxi=Integer.MIN_VALUE;
                    for(int k=i;k<=j;k++){
                        int cost=(arr[i-1]*arr[k]*arr[j+1])+dp[i][k-1]+dp[k+1][j];
                        maxi=Math.max(maxi, cost);
                    }
                    dp[i][j]=maxi;
            }
        }
        return dp[1][n];
    }
}
