// this is same as longest pldrmic subseq as if you subtract string size with longest pldrmic subseq it'll give you req no. of insertions...
public class Solution {
    public static int longestPalindromeSubsequence(String s1) {
		StringBuilder str = new StringBuilder(s1);
        str.reverse();
		String s2=str.toString();

		int[][] dp=new int[s1.length()+1][s2.length()+1];
		
		for(int i=0;i<=s1.length();i++) dp[i][0]=0;
		for(int i=0;i<=s2.length();i++) dp[0][i]=0;

		for(int n1=1;n1<=s1.length();n1++){
			for(int n2=1;n2<=s2.length();n2++){
				if(s1.charAt(n1-1)==s2.charAt(n2-1)) dp[n1][n2]= 1 + dp[n1-1][n2-1];

				else dp[n1][n2]= Math.max(dp[n1-1][n2],dp[n1][n2-1]);
			}
		}
		return dp[s1.length()][s2.length()];
	}
    public static int minInsertion(String str) {
        return str.length()-longestPalindromeSubsequence(str);
    }
}
