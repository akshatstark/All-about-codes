import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

class Result {
   
public static String isBalanced(String s) { 
     Stack st = new Stack<>();
      for(int i = 0; i < s.length(); i++) { 
          char ch = s.charAt(i);

        //if their is opening bracket 
        if(ch == '(' || ch == '{' || ch == '[') {
            st.push(ch);
        } 
        //if we now have closing bracket
        else { 
            if(st.isEmpty())   {
            return "NO";
            }
            if(ch == ')' && st.peek() == '(') {
            st.pop();
            } else if(ch == '}' && st.peek() == '{') {
            st.pop();
            } else if(ch == ']' && st.peek() == '[') {
            st.pop();
            } else {
            return "NO";
            }
        }
    }
    if(st.isEmpty()) {
        return "YES";
    }
        return "NO";
}
}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int t = Integer.parseInt(bufferedReader.readLine().trim());

        for (int tItr = 0; tItr < t; tItr++) {
            String s = bufferedReader.readLine();

            String result = Result.isBalanced(s);

            bufferedWriter.write(result);
            bufferedWriter.newLine();
        }

        bufferedReader.close();
        bufferedWriter.close();
    }
}
