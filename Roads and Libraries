import java.util.*;

class Result {
    public static long roadsAndLibraries(int n, int c_lib, int c_road, List<List<Integer>> cities) {
        if (c_lib <= c_road) {
            // It's cheaper to build a library in each city than to build roads
            return (long) n * c_lib;
        }

        List<List<Integer>> adjacencyList = new ArrayList<>();
        boolean[] visited = new boolean[n + 1];

        // Initialize adjacency list for each city
        for (int i = 0; i <= n; i++) {
            adjacencyList.add(new ArrayList<Integer>());
        }

        // Populate the adjacency list
        for (List<Integer> cityPair : cities) {
            int city1 = cityPair.get(0);
            int city2 = cityPair.get(1);
            adjacencyList.get(city1).add(city2);
            adjacencyList.get(city2).add(city1);
        }

        long totalCost = 0;

        for (int i = 1; i <= n; i++) {
            if (!visited[i]) {
                // Start a new connected component
                long componentCost = dfs(i, adjacencyList, visited, c_road);
                // Calculate the minimum cost for this connected component
                totalCost += Math.min((componentCost - 1) * c_road + c_lib, componentCost * c_lib);
            }
        }

        return totalCost;
    }

    private static long dfs(int city, List<List<Integer>> adjacencyList, boolean[] visited, int c_road) {
        visited[city] = true;
        long componentCost = 1;

        for (int neighbor : adjacencyList.get(city)) {
            if (!visited[neighbor]) {
                componentCost += dfs(neighbor, adjacencyList, visited, c_road);
            }
        }

        return componentCost;
    }
}

public class Solution {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int q = scanner.nextInt();

        for (int qItr = 0; qItr < q; qItr++) {
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            int c_lib = scanner.nextInt();
            int c_road = scanner.nextInt();

            List<List<Integer>> cities = new ArrayList<>();

            for (int i = 0; i < m; i++) {
                int city1 = scanner.nextInt();
                int city2 = scanner.nextInt();
                List<Integer> cityPair = Arrays.asList(city1, city2);
                cities.add(cityPair);
            }

            long result = Result.roadsAndLibraries(n, c_lib, c_road, cities);
            System.out.println(result);
        }

        scanner.close();
    }
}
