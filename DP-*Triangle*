// Recursion(Bottom Up) ->

public class Solution {
    static int solve(int[][] arr, int n,int i,int j){
        int res=0;
        if(i==n-1) return res=arr[n-1][j];

        int down=arr[i][j]+solve(arr, n, i+1, j);
        int dg=arr[i][j]+solve(arr, n, i+1, j+1);
        return res=Math.min(down, dg);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        return solve(triangle,n,0,0);
    }
}

// Memoization->

public class Solution {
    static int solve(int[][] arr, int n,int i,int j,int[][] dp){
        if(i==n-1) return arr[n-1][j];

        if(dp[i][j]!=-1) return dp[i][j];

        int down=arr[i][j]+solve(arr, n, i+1, j,dp);
        int dg=arr[i][j]+solve(arr, n, i+1, j+1,dp);
        return dp[i][j]=Math.min(down, dg);
    }
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp=new int[n][n];
        for(int[] i:dp) Arrays.fill(i, -1);
        return solve(triangle,n,0,0,dp);
    }
}

// Tabulation (Top-Down) thumb rule- tab always opp of memo. ->

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int[][] dp=new int[n][n];
        for(int i=0;i<n;i++){         // filling the last row for refrence as usual
            dp[n-1][i]=triangle[n-1][i];
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down=triangle[i][j]+dp[i+1][j];
                int dg=triangle[i][j]+dp[i+1][j+1];
                dp[i][j]=Math.min(down, dg);
            }
        } 
        return dp[0][0];
    }
}

// Space Optimization->

public class Solution {
    public static int minimumPathSum(int[][] triangle, int n) {
        int[] curr=new int[n];
        int[] prev=new int[n];
        for(int i=0;i<n;i++){    
            prev[i]=triangle[n-1][i];
        }

        for(int i=n-2;i>=0;i--){
            for(int j=i;j>=0;j--){
                int down=triangle[i][j]+prev[j];
                int dg=triangle[i][j]+prev[j+1];
                curr[j]=Math.min(down, dg);
            }
            prev=curr.clone();
        } 
        return prev[0];
    }
}
