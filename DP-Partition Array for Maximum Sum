Front partiton method...
//Recursion-
public class Solution {
    static int solve(int i,int n,int k,int[] arr){
        if(i==n) return 0;

        int maxi=Integer.MIN_VALUE;
        int len=0,mm=0;
        int res=0;
        for(int j=i;j<Math.min(n, i+k);j++){       // smart way to limit the max subarray size to k...
            len++;                                             // increasing the len of subarray...
            mm=Math.max(arr[j], mm);              // findinf the max ele in the subarray...
            res=mm*len+solve(j+1, n, k, arr);     // main recursive code...
            maxi=Math.max(maxi, res);
        }
        return maxi;
    }
    public static int maximumSubarray(int arr[], int k) {
        int n=arr.length;
        return solve(0,n,k,arr);
    }
}

//Memoization-
public class Solution {
    static int solve(int i,int n,int k,int[] arr,int[] dp){
        if(i==n) return 0;

        if(dp[i]!=-1) return dp[i];

        int maxi=Integer.MIN_VALUE;
        int len=0,mm=0;
        int res=0;
        for(int j=i;j<Math.min(n, i+k);j++){       // smart way to limit the max subarray size to k...
            len++;                                             // increasing the len of subarray...
            mm=Math.max(arr[j], mm);              // findinf the max ele in the subarray...
            res=mm*len+solve(j+1, n, k, arr,dp);     // main recursive code...
            maxi=Math.max(maxi, res);
        }
        return dp[i]=maxi;
    }
    public static int maximumSubarray(int arr[], int k) {
        int n=arr.length;
        int[] dp=new int[n];
        Arrays.fill(dp, -1);
        return solve(0,n,k,arr,dp);
    }
}

//Tabulation-

public class Solution {
    public static int maximumSubarray(int arr[], int k) {
        int n=arr.length;
        int[] dp=new int[n+1];
        Arrays.fill(dp, 0);

        for(int i=n-1;i>=0;i--){
            int maxi=Integer.MIN_VALUE;
            int len=0,mm=0;
            int res=0;
            for(int j=i;j<Math.min(n, i+k);j++){       
                len++;                                            
                mm=Math.max(arr[j], mm);              
                res=mm*len+dp[j+1];     
                maxi=Math.max(maxi, res);
            }
            dp[i]=maxi;
        }
        return dp[0];
    }
}
