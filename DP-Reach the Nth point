//khud se kia- normal recursive tree bnake

// Memoization->

// class Solution
// {
//     final int mod=1000000007;
//     int solve(int n,int[] dp){
//         int res=0;
        
//         if(n<=1) return 1;
//         if(dp[n]!=-1) return dp[n];
        
//         else{
//             int two=solve(n-2,dp);
//             int one=solve(n-1,dp);
//             res=(two+one)%mod;
//         }
//         return dp[n]=res;
//     }
//     public int nthPoint(int n)
//     {
//         int[] dp= new int[n+1];
//         Arrays.fill(dp,-1);
//         return solve(n,dp);
//     }
// }

// Tabulation->

// class Solution
// {
//     final int mod=1000000007;
    
//     public int nthPoint(int n)
//     {
//         int[] dp= new int[n+1];

//         dp[0]=1;dp[1]=1;
        
//         for(int i=2;i<=n;i++){
//             int two=dp[i-2];
//             int one=dp[i-1];
//             dp[i]=(two+one)%mod;
//         }
//         return dp[n];
//     }
// }

// Space Optimization->

class Solution
{
    final int mod=1000000007;
    
    public int nthPoint(int n)
    {

        int prev=1,prev2=1;
        
        for(int i=2;i<=n;i++){
            int two=prev2;
            int one=prev;
            int curr=(two+one)%mod;
            
            prev2=prev;
            prev=curr;
        }
        return prev;
    }
}
