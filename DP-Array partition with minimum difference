// same as subset equal to k, as you take all poosible values of subset one and then get subset 2 from that
public class Solution {
    public static int minSubsetSumDifference(int []arr, int n) {
        int tot=0;
        for(int i=0;i<n;i++) tot+=arr[i];

        boolean[][] dp=new boolean[n][tot+1];

        for(int i=0;i<n;i++) dp[i][0]=true;
        if(arr[0]<=tot) dp[0][arr[0]]=true;

        for(int idx=1;idx<n;idx++){
            for(int tar=1;tar<=tot;tar++){
                Boolean notTk=dp[idx-1][tar];

                Boolean take=false;
                if(arr[idx]<=tar) take=dp[idx-1][tar-arr[idx]];

                dp[idx][tar]= take || notTk;
            }
        }
        int mini=Integer.MAX_VALUE;
        for(int i=1;i<=tot;i++){
            if(dp[n-1][i]) {
                mini=Math.min(mini,Math.abs( (tot-i)-i ));
            }
        }
        return mini;
    }
}
