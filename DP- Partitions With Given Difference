public class Solution {
    static int findWaysUtil(int ind, int target, int[] arr, int[][] dp) {    

        if(ind == 0){
            if(target==0 && arr[0]==0)
                return 2;
            if(target==0 || target == arr[0])
                return 1;
            return 0;
    }

        if (dp[ind][target] != -1)
            return dp[ind][target];
		int mod = (int) (1e9 + 7);

        // Calculate the number of ways when the current element is not taken
        int notTaken = findWaysUtil(ind - 1, target, arr, dp);

        // Calculate the number of ways when the current element is taken
        int taken = 0;
        if (arr[ind] <= target)
            taken = findWaysUtil(ind - 1, target - arr[ind], arr, dp);

        // Store and return the result for the current state
        return dp[ind][target] = (notTaken + taken) % mod;
    }

    // Main function to find the number of ways to form subsets with a target sum
    static int findWays(int[] num, int k) {
        int n = num.length;
        int dp[][] = new int[n][k + 1];

        for (int row[] : dp)
            Arrays.fill(row, -1);

        return findWaysUtil(n - 1, k, num, dp);
    }

    public static int countPartitions(int n, int d, int[] arr) {
        int tot = 0;
        for (int i : arr)
            tot += i;

        int k = (tot - d);
        if (k < 0 || k % 2 != 0)
            return 0; // Return 0 instead of -1 for invalid partitions
        return findWays(arr, k / 2);
    }
}
