//Recursion->
public class Solution {
    static int solve(int[] arr,int k,int n){
        if(n==0){
            if(k%arr[0]==0) return k/arr[0];
            else return (int) 1e9;
        }    
        
        int ntpk=0+solve(arr,k,n-1);
        int pk=Integer.MAX_VALUE;
        if(k>=arr[n]) pk=1+solve(arr,k-arr[n],n);

        return Math.min(pk,ntpk);
    }
    public static int minimumElements(int num[], int x) {
        int result = solve(num, x, num.length - 1);
        return (result >=(int) 1e9) ? -1 : result;
    }
}

//Memoization->
public class Solution {
    static int solve(int[] arr,int k,int n,int[][] dp){
        if(n==0){
            if(k%arr[0]==0) return k/arr[0];
            else return (int) 1e9;
        }    

        if(dp[n][k]!=-1) return dp[n][k];

        int ntpk=0+solve(arr,k,n-1,dp);
        int pk=Integer.MAX_VALUE;
        if(k>=arr[n]) pk=1+solve(arr,k-arr[n],n,dp);

        return dp[n][k]=Math.min(pk,ntpk);
    }
    public static int minimumElements(int num[], int x) {
        int[][] dp =new int[num.length][x+1];
        for(int[] row:dp) Arrays.fill(row, -1);

        int result = solve(num, x, num.length - 1,dp);
        return (result >=(int) 1e9) ? -1 : result;
    }
}

//Tabulation->
public class Solution {
    static int solve(int[] arr,int k,int n,int[][] dp){
        if(n==0){
            if(k%arr[0]==0) return k/arr[0];
            else return (int) 1e9;
        }    

        if(dp[n][k]!=-1) return dp[n][k];

        int ntpk=0+solve(arr,k,n-1,dp);
        int pk=Integer.MAX_VALUE;
        if(k>=arr[n]) pk=1+solve(arr,k-arr[n],n,dp);

        return dp[n][k]=Math.min(pk,ntpk);
    }
    public static int minimumElements(int arr[], int x) {
        int[][] dp =new int[arr.length][x+1];

        for(int k=0;k<=x;k++){
            if(k%arr[0]==0) dp[0][k]=k/arr[0];
            else dp[0][k]=(int) 1e9;
        }
 
        for(int idx=1;idx<arr.length;idx++){
            for(int k=0;k<=x;k++){
                int ntpk=0+dp[idx-1][k];
                int pk=Integer.MAX_VALUE;
                if(k>=arr[idx]) pk=1+dp[idx][k-arr[idx]];

                dp[idx][k]=Math.min(pk,ntpk);
            }
        }
        
        return (dp[arr.length-1][x] >=(int) 1e9) ? -1 : dp[arr.length-1][x];
    }
}
