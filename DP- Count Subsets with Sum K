// Memoization->  (Partial TC) use mod for long ans
public class Solution {
    static int findWaysUtil(int ind, int target, int[] arr, int[][] dp) {
        if (target == 0)
            return 1;

        if (ind == 0)
            return arr[0] == target ? 1 : 0;

        if (dp[ind][target] != -1)
            return dp[ind][target];

        // Calculate the number of ways when the current element is not taken
        int notTaken = findWaysUtil(ind - 1, target, arr, dp);

        // Calculate the number of ways when the current element is taken
        int taken = 0;
        if (arr[ind] <= target)
            taken = findWaysUtil(ind - 1, target - arr[ind], arr, dp);

        // Store and return the result for the current state
        return dp[ind][target] = notTaken + taken;
    }

    // Main function to find the number of ways to form subsets with a target sum
    static int findWays(int[] num, int k) {
        int n = num.length;
        int dp[][] = new int[n][k + 1];

        for (int row[] : dp)
            Arrays.fill(row, -1);

        return findWaysUtil(n - 1, k, num, dp);
    }
}

// Tabulation -> (Partial TC)
public class Solution {
    // Main function to find the number of ways to form subsets with a target sum
    static int findWays(int[] num, int k) {
        int n = num.length;
        int dp[][] = new int[n][k + 1];

        for(int i=0;i<n;i++) dp[i][0]=1;

        if (num[0] <= k) {
            dp[0][num[0]] = 1;
        }

        for(int i=1;i<n;i++){
            for(int j=1;j<=k;j++){
               int notTaken = dp[i-1][j];

               int taken = 0;
               if (num[i] <= j)
                  taken = dp[i-1][j-num[i]];

                dp[i][j]=taken+notTaken;
            }
        }
        return dp[n-1][k];
    }
}

// Space Opt->
public class Solution {
    // Main function to find the number of ways to form subsets with a target sum
    static int findWays(int[] arr, int k) {
        int n = arr.length;
        int[] prev = new int[k+1];
        if(arr[0]==0) prev[0] = 2; //for test case {0} the answer is 2
        else{
            prev[0] = 1; //if there is only one element in arrray. i.e., {1}
            if(arr[0]<=k) prev[arr[0]] = 1; //target arr[0] is reachable if it exists in the array and is less than k
        }
        int mod = (int)1e9+7;
        for(int i=1;i<n;i++){
            int[] curr = new int[k+1];
            for(int j=0;j<=k;j++){
                int count = prev[j];
                if(arr[i]<=j) count+=prev[j-arr[i]];
                curr[j] = count%mod;
            }
            prev = curr;
        }
        return prev[k];
    }
}
