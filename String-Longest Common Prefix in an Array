optimized- 
class Solution {
    String longestCommonPrefix(String arr[], int n) {
        if (n == 0) {
            return "-1"; // Return -1 if the array is empty.
        }

        String first = arr[0];
        String last = arr[0]; // Initialize last with the first string.
        int minLength = first.length();

        for (int i = 1; i < n; i++) {
            String current = arr[i];
            int j = 0;
            while (j < minLength && j < current.length() && first.charAt(j) == current.charAt(j)) {
                j++;
            }
            if (j == 0) {
                return "-1"; // No common prefix found, return -1.
            }
            if (j < minLength) {
                minLength = j;
                last = current;
            }
        }

        return first.substring(0, minLength);
    }
}


my code- 
class Solution{
    String longestCommonPrefix(String arr[], int n){
        // code here
        // arr[i].charAt(i)
        if(n==0){
            return "-1";
        }
        Arrays.sort(arr);
        String f=arr[0];
        String l=arr[n-1];
        StringBuilder res= new StringBuilder();
        int m=Math.min(f.length(),l.length());
        for(int i=0;i<m;i++){
            if(f.charAt(i)==l.charAt(i)){
                res.append(f.charAt(i));
            }
            else{
                break;
            }
        }
        if(res.length()==0) return("-1");
        return res.toString();
        
    }
}   
