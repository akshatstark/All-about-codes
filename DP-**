// Recursion->

public class Solution {
    static int solve(int row, int col, ArrayList<ArrayList<Integer>> arr){
        if(row==0 && col==0) return 1;

        if(row<0 || col<0 ) return 0;

        if(arr.get(row).get(col) == -1) return 0;

        int up=solve(row-1, col, arr);
        int left=solve(row, col-1, arr);

        return up+left;
    }
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        return solve(n-1, m-1, mat);
    }
}

// Memoization->

public class Solution {
    static int solve(int row, int col, ArrayList<ArrayList<Integer>> arr,int[][] dp){
        if(row==0 && col==0) return 1;

        if(row<0 || col<0 ) return 0;

        if(arr.get(row).get(col) == -1) return 0;

        if(dp[row][col]!=-2) return dp[row][col];
        int up=solve(row-1, col, arr,dp)%1000000007;
        int left=solve(row, col-1, arr,dp)%1000000007;

        return dp[row][col]=(up+left)%1000000007;
    }
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][]=new int[n][m];
        for(int[] i:dp){
            Arrays.fill(i,-2);
        }
        return solve(n-1, m-1, mat,dp);
    }
}

// Tabulation->

public class Solution {
    static int mazeObstacles(int n, int m, ArrayList<ArrayList<Integer>> mat) {
        int dp[][]=new int[n][m];
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
               if(row>=0 && col>=0 && mat.get(row).get(col) == -1 ) dp[row][col]=0;

               else if(row==0 && col==0) dp[row][col]=1;

               else{
                    int up=0,left=0;
                    if(row>0) up=dp[row-1][col];
                    if(col>0) left=dp[row][col-1];

                    dp[row][col]=(up+left)%1000000007;
                    }
            }
        }
        return dp[n-1][m-1];
    }
}
