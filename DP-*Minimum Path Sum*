//Recursion->

public class Solution {
    public static int solve(int[][] grid,int row,int col){
        int res=0;
        if(row==0 && col==0) {
            int c= grid[0][0];
            res=c;
            return res;
        }
        
        if(row<0 || col<0) return 10000;

        int left=grid[row][col]+solve(grid, row, col-1);
        int up=grid[row][col]+solve(grid, row-1, col);

        return res=Math.min(left,up);
    }
    public static int minSumPath(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;
    	return solve(grid, row-1, col-1);
    }
}

//Memoization->

public class Solution {
    public static int solve(int[][] grid,int row,int col,int[][] dp){
        int res=0;
        if(row==0 && col==0) {
            return grid[0][0];     
        }
       
        if(row<0 || col<0) return 100000000;   

        if(dp[row][col]!=-1) return dp[row][col];
        
        int left=grid[row][col]+solve(grid, row, col-1,dp);
        int up=grid[row][col]+solve(grid, row-1, col,dp);

        return dp[row][col]=Math.min(left,up);
    }
    public static int minSumPath(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;

        int[][] dp=new int[row][col];
        for(int[] i:dp) Arrays.fill(i, -1);

    	  return solve(grid, row-1, col-1,dp);
    }
}

//Tabulation->


public class Solution {
    public static int minSumPath(int[][] grid) {
        int row=grid.length;
        int col=grid[0].length;
        int[][] dp=new int[row][col];

    	for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                int ryt=0,down=0;
                if(i==0 && j==0) {
                    dp[i][j]=grid[0][0];     
                }
            
                else{
                    ryt=grid[i][j];
                    if(j>0)   ryt+=dp[i][j-1];
                    else ryt=100000000;    // adding this value bcoz if not it will consider as 0 and this will be minimum

                    down=grid[i][j];
                    if(i>0)  down+=dp[i-1][j];
                    else down=100000000;

                     dp[i][j]=Math.min(ryt, down);
                }
            }
        }
        return dp[row-1][col-1];
    }
}
