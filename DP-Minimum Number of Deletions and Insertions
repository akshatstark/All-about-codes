// this code is also application of lcs
public class Solution {
    public static int lcs(String s, String t) {
		int n=s.length();
		int m=t.length();
		int[][] dp=new int[n+1][m+1];

		for(int i=0;i<=n;i++) dp[i][0]=0;
		for(int j=0;j<=m;j++) dp[0][j]=0;

		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				if(s.charAt(i-1)==t.charAt(j-1)) dp[i][j]= 1+ dp[i-1][j-1];

        		else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
			}
		}
		return dp[n][m];
    }
    public static int canYouMake(String s1, String s2) {
        int n=lcs(s1, s2);
        // logic is here...
        // int del=s1.length()-n; first we ony retain the common elements
        // int ins=s2.length()-n; then we insert the remaining elements
        // example s1=abcd , s2=anc => abcd-> ac(lcs) 2 deletions
        // then ac->anc 1 insertion...
        return s1.length()+s2.length()-2*n;
    }
}
