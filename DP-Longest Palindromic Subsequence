//Recursion-
public class Solution {
	static int solve (String s1,String s2,int n1,int n2){
		if(n1<0 || n2<0) return 0;

		if(s1.charAt(n1)==s2.charAt(n2)) return 1+solve(s1,s2,n1-1,n2-1);

		return Math.max(solve(s1,s2,n1-1,n2),solve(s1,s2,n1,n2-1));
	}
	public static int longestPalindromeSubsequence(String s) {
		StringBuilder str = new StringBuilder(s);
		str.reverse();
		return solve(s,str.toString(),s.length()-1,str.length()-1);
	}
}

//Memoization-
public class Solution {
	static int solve (String s1,String s2,int n1,int n2,int[][] dp){
		if(n1<0 || n2<0) return 0;

		if(dp[n1][n2]!=-1) return dp[n1][n2];

		if(s1.charAt(n1)==s2.charAt(n2)) return 1+solve(s1,s2,n1-1,n2-1,dp);

		return dp[n1][n2]= Math.max(solve(s1,s2,n1-1,n2,dp),solve(s1,s2,n1,n2-1,dp));
	}
	public static int longestPalindromeSubsequence(String s) {
		StringBuilder str = new StringBuilder(s);
		str.reverse();

		int[][] dp=new int[s.length()+1][s.length()+1];
		for(int[] row:dp) Arrays.fill(row, -1);

		return solve(s,str.toString(),s.length()-1,str.length()-1,dp);
	}
}

//Tabulation-
public class Solution {
	public static int longestPalindromeSubsequence(String s1) {
		StringBuilder str = new StringBuilder(s1);
        str.reverse();
		String s2=str.toString();

		int[][] dp=new int[s1.length()+1][s2.length()+1];
		
		for(int i=0;i<=s1.length();i++) dp[i][0]=0;
		for(int i=0;i<=s2.length();i++) dp[0][i]=0;

		for(int n1=1;n1<=s1.length();n1++){
			for(int n2=1;n2<=s2.length();n2++){
				if(s1.charAt(n1-1)==s2.charAt(n2-1)) dp[n1][n2]= 1 + dp[n1-1][n2-1];

				else dp[n1][n2]= Math.max(dp[n1-1][n2],dp[n1][n2-1]);
			}
		}
		return dp[s1.length()][s2.length()];
	}
}
