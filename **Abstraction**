// Abstraction using abstract class
abstract class Animal{
    private String name;
    
     public Animal(String name){
        this.name=name;
    }
    
    abstract void sound();
    
    public String getName(){
        return name;
    }
}
class Dog extends Animal{
    public Dog(String name){
        super(name);
    }
    
    void sound(){
        System.out.println(getName() +" Barks...");
    }
}

class Cat extends Animal{
    public Cat(String name){
        super(name);
    }
    
    void sound(){
        System.out.println(getName()+" Meows...");
    }
}
public class Main{
    public static void main(String[] args){
        Animal a;
        a=new Dog("Spike");
        a.sound();
        a=new Cat("Tom");
        a.sound();
    }
}
// Abstraction using interface
interface Study{
    void time();
    void subjects();
}
abstract class Student implements Study{
    public void subjects(){
        System.out.println("Focus on all subjects");
    }
}
class Time extends Student{
    public void time(){
        System.out.println("Make proper time table");
    }
}
public class Main{
    public static void main(String[] args){
        Time t;
        t=new Time();
        t.subjects();
        t.time();
    }
}
