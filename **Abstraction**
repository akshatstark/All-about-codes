// Abstraction using abstract class
abstract class Animal{
    private String name;
    
     public Animal(String name){
        this.name=name;
    }
    
    abstract void sound();
    
    public String getName(){
        return name;
    }
}
class Dog extends Animal{
    public Dog(String name){
        super(name);
    }
    
    void sound(){
        System.out.println(getName() +" Barks...");
    }
}

class Cat extends Animal{
    public Cat(String name){
        super(name);
    }
    
    void sound(){
        System.out.println(getName()+" Meows...");
    }
}
public class Main{
    public static void main(String[] args){
        Animal a;
        a=new Dog("Spike");
        a.sound();
        a=new Cat("Tom");
        a.sound();
    }
}

// another example
abstract class Car{
    private String name;
    
    public Car(String name){
        this.name=name;
    }
    
    abstract void acc();
    abstract void brake();
    public String name(){
        return name;
    }
}
class Acc extends Car{
    public Acc(String name){
        super(name);
    }
    void acc(){
        System.out.println(name()+" is moving now...");
    }
     void brake(){
         System.out.println(" is stopped now...");
     }
}
class Main{
    public static void main(String[] args){
        Car c;
        c=new Acc("Sedan");
        c.acc();
    }
}

// Abstraction using interface

interface Study {
    void time();     // Declare an abstract method 'time'
    void subjects(); // Declare an abstract method 'subjects'
}

abstract class Student implements Study {
    public void subjects() {
        // Provide a default implementation for the 'subjects' method
        System.out.println("Focus on all subjects");
    }
}

class Time extends Student {
    public void time() {
        // Implement the 'time' method specific to the 'Time' class
        System.out.println("Make proper time table");
    }
}

public class Main {
    public static void main(String[] args) {
        Time t; // Declare a reference of type 'Time'
        t = new Time(); // Instantiate the 'Time' class and assign it to 't'

        t.subjects(); // Call the 'subjects' method from the 'Time' object
        t.time();     // Call the 'time' method from the 'Time' object
    }
}

