//RECURSION :-  T.C → O(2^n)      S.C → O(n)

public class NinjaTraining {

    static int recursion(int day, int lastDay, int[][] points, int n) {
        if (day == n - 1) {
            int maxi = 0;
            for (int i = 0; i <= 2; i++) {
                if (i != lastDay) {
                    maxi = Math.max(points[n - 1][i], maxi);
                }
            }
            return maxi;
        }

        int maxi = 0;
        for (int i = 0; i <= 2; i++) {
            if (i != lastDay) {
                int score = points[day][i] + recursion(day + 1, i, points, n);
                maxi = Math.max(maxi, score);
            }
        }
        return maxi;
    }

    static int ninjaTrainingRecursion(int n, int[][] points) {
        return recursion(0, 3, points, n);
    }

//MEMOIZATION :-  T.C → O(n)   S.C → O(n) + O(n)

    static int memoization(int day, int lastDay, int[][] points, int n, int[][] dp) {
        if (day == n - 1) {
            int maxi = 0;
            for (int i = 0; i <= 2; i++) {
                if (i != lastDay) {
                    maxi = Math.max(points[n - 1][i], maxi);
                }
            }
            return maxi;
        }

        if (dp[day][lastDay] != -1) return dp[day][lastDay];

        int maxi = 0;
        for (int i = 0; i <= 2; i++) {
            if (i != lastDay) {
                int score = points[day][i] + memoization(day + 1, i, points, n, dp);
                maxi = Math.max(maxi, score);
            }
        }
        return dp[day][lastDay] = maxi;
    }

    static int ninjaTrainingMemoization(int n, int[][] points) {
        int[][] dp = new int[n][4];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return memoization(0, 3, points, n, dp);
    }

//TABULATION :-  T.C → O(n)  S.C → O(n)

    static int ninjaTrainingTabulation(int n, int[][] points) {
        int[][] dp = new int[n][4];

        dp[n - 1][0] = Math.max(points[n - 1][2], points[n - 1][1]);
        dp[n - 1][1] = Math.max(points[n - 1][0], points[n - 1][2]);
        dp[n - 1][2] = Math.max(points[n - 1][0], points[n - 1][1]);
        dp[n - 1][3] = Math.max(points[n - 1][0], Math.max(points[n - 1][1], points[n - 1][2])));

        for (int day = n - 2; day >= 0; day--) {
            for (int lastDay = 0; lastDay <= 3; lastDay++) {
                int maxi = 0;
                for (int i = 0; i <= 2; i++) {
                    if (i != lastDay) {
                        int score = points[day][i] + dp[day + 1][i];
                        maxi = Math.max(maxi, score);
                        dp[day][lastDay] = maxi;
                    }
                }
            }
        }

        return dp[0][3];
    }

//SPACE OPTIMIZATION :-  T.C → O(n)   S.C → O(1)

    static int ninjaTrainingSpaceOptimization(int n, int[][] points) {
        int[] prev = new int[4];

        prev[0] = Math.max(points[n - 1][2], points[n - 1][1]);
        prev[1] = Math.max(points[n - 1][0], points[n - 1][2]);
        prev[2] = Math.max(points[n - 1][0], points[n - 1][1]);
        prev[3] = Math.max(points[n - 1][0], Math.max(points[n - 1][1], points[n - 1][2])));

        for (int day = n - 2; day >= 0; day--) {
            int[] temp = new int[4];
            for (int lastDay = 0; lastDay <= 3; lastDay++) {
                int maxi = 0;
                for (int i = 0; i <= 2; i++) {
                    if (i != lastDay) {
                        int score = points[day][i] + prev[i];
                        maxi = Math.max(maxi, score);
                        temp[lastDay] = maxi;
                    }
                }
            }
            prev = temp;
        }

        return prev[3];
    }
}
