//Recursion-
public class Solution {
    static boolean isPalindrome(String s,int i,int j){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
    static int solve(int i,int n,String str){
        if(i==n) return 0;

        int mini=Integer.MAX_VALUE;
        int cost=0;
        for(int j=i;j<=n-1;j++){
            if(isPalindrome(str,i,j))
            cost=1+solve(j+1, n, str);
            mini=Math.min(cost, mini);
        }
        return mini;
    }
    public static int palindromePartitioning(String str) {
        int n=str.length();
        return solve(0,n,str)-1;
    }
}

//Memoization-
public class Solution {
    static boolean isPalindrome(String s,int i,int j){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
    static int solve(int i,int n,String str,int[] dp){
        if(i==n) return 0;

        if(dp[i]!=-1) return dp[i];

        int mini=Integer.MAX_VALUE;
        int cost=0;
        for(int j=i;j<=n-1;j++){
            if(isPalindrome(str,i,j))
            cost=1+solve(j+1, n, str,dp);
            mini=Math.min(cost, mini);
        }
        return dp[i]=mini;
    }
    public static int palindromePartitioning(String str) {
        int n=str.length();
        int[] dp=new int[n];
        Arrays.fill(dp,-1);
        return solve(0,n,str,dp)-1;
    }
}

//Tabulation-
public class Solution {
    static boolean isPalindrome(String s,int i,int j){
        while(i<j){
            if(s.charAt(i)!=s.charAt(j)) return false;
            i++;
            j--;
        }
        return true;
    }
    public static int palindromePartitioning(String str) {
        int n=str.length();
        int[] dp=new int[n+1];
        Arrays.fill(dp,0);
        dp[n]=0;
       
        for(int i=n-1;i>=0;i--){
            int mini=Integer.MAX_VALUE;
            int cost=0;
            for(int j=i;j<n;j++){
                if(isPalindrome(str,i,j))
                cost=1+dp[j+1];
                mini=Math.min(cost, mini);
            }
        dp[i]=mini;
        }
        return dp[0]-1;
    }
}
