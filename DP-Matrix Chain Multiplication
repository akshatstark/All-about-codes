//Recursion(TC-expo)-
public class Solution {
	static int solve(int i,int j,int[] arr){
		if(i==j) return 0;

		int mini=Integer.MAX_VALUE;
		for(int k=i;k<=j-1;k++){
			int steps=(arr[i-1]*arr[k]*arr[j])+solve(i, k, arr)+solve(k+1, j, arr);   // this is the basic principle...
			mini=Math.min(mini, steps);
		}
		return mini;
	}
	public static int matrixMultiplication(int[] arr , int N) {
		return solve(1,N-1,arr);
	}
}

//Memoization(TC-N*N*N)-
public class Solution {
	static int solve(int i,int j,int[] arr,int[][] dp){
		if(i==j) return 0;

		if(dp[i][j]!=-1) return dp[i][j];

		int mini=Integer.MAX_VALUE;
		for(int k=i;k<=j-1;k++){
			int steps=(arr[i-1]*arr[k]*arr[j])+solve(i, k, arr,dp)+solve(k+1, j, arr,dp);   // this is the basic principle...
			mini=Math.min(mini, steps);
		}
		return dp[i][j]= mini;
	}
	public static int matrixMultiplication(int[] arr , int N) {
		int[][] dp=new int[N][N];
		for(int[] row:dp) Arrays.fill(row,-1);
		return solve(1,N-1,arr,dp);
	}
}

//Tabulation-
public class Solution {
	public static int matrixMultiplication(int[] arr , int N) {
		int[][] dp=new int[N][N];
		
		for(int i=N-1;i>=1;i--){
			for(int j=i+1;j<N;j++){
				int mini=Integer.MAX_VALUE;
				for(int k=i;k<=j-1;k++){
					int steps=(arr[i-1]*arr[k]*arr[j])+dp[i][k]+dp[k+1][j];  
					mini=Math.min(mini, steps);
				}
				dp[i][j]= mini;
			}
		}
		return dp[1][N-1];
	}
}
