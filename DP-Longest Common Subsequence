//Recursion-
public class Solution {
    static int solve(int n,String s,int m,String t){
        if(n<0 || m<0) return 0;

        if(s.charAt(n)==t.charAt(m)) return 1+ solve(n-1,s,m-1,t);

        return Math.max(solve(n-1,s,m,t),solve(n,s,m-1,t));
    }

	public static int lcs(String s, String t) {
		return solve(s.length()-1,s,t.length()-1,t);
    }
}

//Memoization-
public class Solution {
    static int solve(int n,String s,int m,String t,int[][] dp){
        if(n<0 || m<0) return 0;

		if(dp[n][m]!=-1) return dp[n][m];

        if(s.charAt(n)==t.charAt(m)) return 1+ solve(n-1,s,m-1,t,dp);

        return dp[n][m]=Math.max(solve(n-1,s,m,t,dp),solve(n,s,m-1,t,dp));
    }

	public static int lcs(String s, String t) {
		int[][] dp=new int[s.length()][t.length()];
		for(int[] row:dp) Arrays.fill(row,-1);

		return solve(s.length()-1,s,t.length()-1,t,dp);
    }
}

//Tabulation-
public class Solution {
	public static int lcs(String s, String t) {
		int n=s.length();
		int m=t.length();
		int[][] dp=new int[n+1][m+1];

		for(int i=0;i<=n;i++) dp[i][0]=0;
		for(int j=0;j<=m;j++) dp[0][j]=0;

		for(int i=1;i<=n;i++){
			for(int j=1;j<=m;j++){
				if(s.charAt(i-1)==t.charAt(j-1)) dp[i][j]= 1+ dp[i-1][j-1];

        		else dp[i][j]=Math.max(dp[i-1][j],dp[i][j-1]);
			}
		}
		return dp[n][m];
    }
}
