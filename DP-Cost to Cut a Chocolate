//Recursion-
public class Solution {
    static int solve(int i,int j,int[] cut){
        if(i>j) return 0;

        int mini=Integer.MAX_VALUE;
        for(int k=i;k<=j;k++){
            int cost=(cut[j+1]-cut[i-1])+solve(i, k-1, cut)+solve(k+1, j, cut);
            mini=Math.min(mini, cost);
        }
        return mini;
    }
    public static int cost(int n, int c, int cuts[]) {
// making a new array to add 2 ele - first and last (0 & N)...
        int[] cut=new int[c+2];
        cut[0]=0;
        for(int i=1;i<c+1;i++){
            cut[i]=cuts[i-1];
        }
        cut[c+1]=n;
        Arrays.sort(cut);

        return solve(1,c,cut);
    }
}

//Memoization-
public class Solution {
    static int solve(int i,int j,int[] cut,int[][] dp){
        if(i>j) return 0;

        if(dp[i][j]!=-1) return dp[i][j];

        int mini=Integer.MAX_VALUE;
        for(int k=i;k<=j;k++){
            int cost=(cut[j+1]-cut[i-1])+solve(i, k-1, cut,dp)+solve(k+1, j, cut,dp);
            mini=Math.min(mini, cost);
        }
        return dp[i][j]=mini;
    }
    public static int cost(int n, int c, int cuts[]) {
// making a new array to add 2 ele - first and last (0 & N)...
        int[] cut=new int[c+2];
        cut[0]=0;
        for(int i=1;i<c+1;i++){
            cut[i]=cuts[i-1];
        }
        cut[c+1]=n;
        Arrays.sort(cut);

        int[][] dp=new int[c+1][c+1];
        for(int[] row:dp) Arrays.fill(row,-1);

        return solve(1,c,cut,dp);
    }
}

//Tabulation-
public class Solution {
        public static int cost(int n, int c, int cuts[]) {
// making a new array to add 2 ele - first and last (0 & N)...
        int[] cut=new int[c+2];
        cut[0]=0;
        for(int i=1;i<c+1;i++){
            cut[i]=cuts[i-1];
        }
        cut[c+1]=n;
        Arrays.sort(cut);

        int[][] dp=new int[c+2][c+2];
        for(int[] row:dp) Arrays.fill(row,0);

        for(int i=c;i>=1;i--){
            for(int j=1;j<=c;j++){
                if(i>j) continue;
                 int mini=Integer.MAX_VALUE;
                for(int k=i;k<=j;k++){
                    int cost=(cut[j+1]-cut[i-1])+dp[i][k-1]+dp[k+1][j];
                    mini=Math.min(mini, cost);
                }
                 dp[i][j]=mini;
            }
        }
        return dp[1][c];
    }
}
