//Memoization->
public class Solution{
    static int solve(int[] wt,int[] val,int n,int W,int[][] dp){
        if(n==0) {
            if(wt[0]<=W)
            return val[0];
            else return 0;
            }

        if(dp[n][W]!=-1) return dp[n][W];
        
        int notpk=0+solve(wt, val, n-1, W,dp);
        int pk=Integer.MIN_VALUE;
        if(W>=wt[n]) pk=val[n]+solve(wt, val, n-1, W-wt[n],dp);
       
        return dp[n][W]=Math.max(pk, notpk);
    }
        
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp=new int[n][maxWeight+1];
        for(int row[]:dp) Arrays.fill(row, -1);

        return solve(weight,value,n-1,maxWeight,dp);

    }
}

//Tabulation->
public class Solution{
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp=new int[n][maxWeight+1];
        
        for(int i=weight[0];i<=maxWeight;i++) dp[0][i]=value[0];

        for(int i=1;i<n;i++){
            for(int j=0;j<=maxWeight;j++){
                int notpk=0+dp[i-1][j];
                int pk=Integer.MIN_VALUE;
                if(j>=weight[i]) pk=value[i]+dp[i-1][j-weight[i]];

                dp[i][j]=Math.max(pk, notpk);
            }
        }
        return dp[n-1][maxWeight];
    }
}
