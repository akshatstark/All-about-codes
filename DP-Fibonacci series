/******************************************************************************

Recursion-> Memoization -> Tabulation -> Space Optimization

*******************************************************************************/

// Recursion O(2^N) & O(2^N)
/*
public class Main
{
	public static void main(String[] args) {
	    int n=5;
		System.out.println(solve(n));
	}
	static int solve(int n){
	    if(n<=1) return n;
	    else{
	        return solve(n-1)+solve(n-2);
	    }
	}
}


//Memoization(Top Down) O(N) & O(N)+O(N)

import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    int n=6;
	    int[] dp=new int[n+1];
	    Arrays.fill(dp,-1);
		System.out.println(solve(n,dp));
	}
	static int solve(int n,int[] dp){
	    if(n<=1) return n;
	    if(dp[n]!=-1) return dp[n];
	    else{
	        return dp[n]=solve(n-1,dp)+solve(n-2,dp);
	    }
	}
}


// Tablulation(Bottom Up) O(N) & O(N)

import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    int n=6;
	    int[] dp=new int[n+1];
	    Arrays.fill(dp,-1);
		System.out.println(solve(n,dp));
	}
	static int solve(int n,int[] dp){
	    dp[0]=0;
	    dp[1]=1;
	    for(int i=2;i<=n;i++){
	        dp[i]=dp[i-1]+dp[i-2];
	    }
	    return dp[n];
	}
}
*/

//Space Optimization O(N) & O(1)

import java.util.*;
public class Main
{
	public static void main(String[] args) {
	    int n=7;
		System.out.println(solve(n));
	}
	static int solve(int n){
	    int prev=1;
	    int prev2=0;
	    for(int i=2;i<=n;i++){
	        int curr=prev+prev2;
	        prev2=prev;
	        prev=curr;
	    }
	    return prev;
	}
}
