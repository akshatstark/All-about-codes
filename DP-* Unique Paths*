// Recursion->

public class Solution {
	public static int solve(int row, int col){
		if(row==0 && col==0) return 1;

		if(row<0 || col<0) return 0;

		int up=solve(row-1,col);
		int left=solve(row,col-1);

		return up+left;
	}
	public static int uniquePaths(int m, int n) {
		
		return solve(m-1,n-1);
	}
}

// Memoization->

public class Solution {
	public static int solve(int row, int col,int[][] dp){
		if(row==0 && col==0) return 1;

		if(row<0 || col<0) return 0;

		if(dp[row][col]!=-1) return dp[row][col];
		
		int up=solve(row-1,col,dp);
		int left=solve(row,col-1,dp);

		return dp[row][col]=up+left;
	}
	public static int uniquePaths(int m, int n) {
		int[][] dp=new int[m][n];
		for(int[] i:dp){
			Arrays.fill(i, -1);
		}
		return solve(m-1,n-1,dp);
	}
}

// Tabulation->

public class Solution {
	public static int uniquePaths(int m, int n) {
		int[][] dp=new int[m][n];
		for(int i=0;i<m;i++){
			for(int j=0;j<n;j++){
				if(i==0&&j==0) dp[i][j]=1;
				else{
					int right=0,down=0;

				if(j>0)  right=dp[i][j-1];
				if(i>0)  down=dp[i-1][j];

				dp[i][j]=right+down;
				}
			}
		}
		return dp[m-1][n-1];
	}
}

// Space Optimization->

complex...
