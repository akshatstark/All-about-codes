//Recursion-
public class Solution {
    static long solve(int idx,int buy,long[] values,int n){
        if(idx==n) return 0;

        long pft=0;

        if(buy==1){
            pft=Math.max(-values[idx]+solve(idx+1, 0, values, n), 0+solve(idx+1, 1, values, n));
        }
        else{
             pft=Math.max(values[idx]+solve(idx+1, 1, values, n), 0+solve(idx+1, 0, values, n));
        }
        return pft;
    }
    public static long getMaximumProfit (int n, long[] values) {
        return solve(0,1,values,n);
    }
}

//Memoization-
public class Solution {
    static long solve(int idx, int buy, long[] values, int n, long[][] dp) {
        if (idx == n) return 0;

        if (dp[idx][buy] != -1) return dp[idx][buy];

        long pft = 0;

        if (buy == 1) {
            pft = Math.max(-values[idx] + solve(idx + 1, 0, values, n, dp), 0 + solve(idx + 1, 1, values, n, dp));
        } else {
            pft = Math.max(values[idx] + solve(idx + 1, 1, values, n, dp), 0 + solve(idx + 1, 0, values, n, dp));
        }
        return dp[idx][buy] = pft;
    }

    public static long getMaximumProfit(int n, long[] values) {
        long[][] dp = new long[n][2];
        for (long[] row : dp) Arrays.fill(row, -1);

        return solve(0, 1, values, n, dp);
    }
}

//Tabulation-(Bottom-Up)
public class Solution {
    public static long getMaximumProfit(int n, long[] values) {
        long[][] dp = new long[n+1][2];
        
        dp[n][0]=dp[n][1]=0;
        long pft = 0;

        for(int idx=n-1;idx>=0;idx--){
            for(int buy=0;buy<=1;buy++){
                if (buy == 1) {
                  pft = Math.max(-values[idx] + dp[idx+1][0], 0 + dp[idx+1][1]);
                } 
                else {
                  pft = Math.max(values[idx] + dp[idx+1][1], 0 + dp[idx+1][0]);
                }
                dp[idx][buy]=pft;
            }
        }
        return dp[0][1];
    }
}
