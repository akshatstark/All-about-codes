for subseq and subset problem or target prob, express in terms of idx and target...
//Recursion->
public class Solution {
    static boolean solve(int n,int k,int[] arr){
        if(k==0) return true;
        if(n==0 ) return arr[0]==k;

        boolean ntk=solve(n-1,k,arr);
        boolean tk=false;
        if(k>=arr[n]) tk=solve(n-1,k-arr[n],arr);
  
         return ntk || tk;
    }
    public static boolean subsetSumToK(int n, int k, int arr[]){
        return solve(n-1,k,arr);
    }
}

//Memoizaion->
public class Solution {
    static boolean solve(int n,int k,int[] arr,int[][] dp){
        if(k==0) return true;
        if(n==0 ) return arr[0]==k;
        if(dp[n][k]!=-1) return dp[n][k]==0?false:true;

        boolean ntk=solve(n-1,k,arr,dp);

        boolean tk=false;
        if(k>=arr[n]) tk=solve(n-1,k-arr[n],arr,dp);
        
        dp[n][k]=ntk || tk?1:0;
        return ntk || tk;
    }
    public static boolean subsetSumToK(int n, int k, int arr[]){
        int[][] dp=new int[n][k+1];
        for(int[] row:dp) Arrays.fill(row, -1);
        return solve(n-1,k,arr,dp);
    }
}

//Tabulation->
public class Solution {
    public static boolean subsetSumToK(int n, int k, int arr[]){
        boolean dp[][] = new boolean[n][k + 1];
        
        // Initialize the first row of the DP table
        for (int i = 0; i < n; i++) {
            dp[i][0] = true;
        }

        // Initialize the first column of the DP table
        if (arr[0] <= k) {
            dp[0][arr[0]] = true;
        }

        // Fill in the DP table using bottom-up approach
        for (int ind = 1; ind < n; ind++) {
            for (int target = 1; target <= k; target++) {
                // Calculate if the current target can be achieved without taking the current element
                boolean notTaken = dp[ind - 1][target];
                
                // Calculate if the current target can be achieved by taking the current element
                boolean taken = false;
                if (arr[ind] <= target) {
                    taken = dp[ind - 1][target - arr[ind]];
                }
                
                // Store the result in the DP table
                dp[ind][target] = notTaken || taken;
            }
        }

        // The final result is stored in the bottom-right cell of the DP table
        return dp[n - 1][k];
    }
}
